GRAMMAR:

Te quiero mucho profe Yarasca

[X] means X is optional
{X | Y} means choice between X or Y
Tokens: INT | FLOAT | VARCHAR[(INT)] | DATE | BOOL

StatementList -> Statement[;StatementList]
Statement -> CreateStatement | SelectStatement | DropStatement | DeleteStatement | InsertStatement | UpdateStatement

==================================================================================

Identifier refers to anything that is not a token itself, like table names, types, etc


CreateStatement -> CreateTableStatement | CreateIndexStatement

CreateTableStatement -> CREATE TABLE UserIdentifier(CreateTableColumns)
CreateTableColumns -> CreateTableColumnDefinition[,CreateTableColumns]
CreateTableColumnDefinition -> UserIdentifier DataType ArgumentList
DataType- > INT | FLOAT | VARCHAR[(INT_CONSTANT)] | DATE | BOOL
ArgumentList -> [PRIMARY KEY] [USING Method]

CreateIndexStatement -> CREATE INDEX UserIdentifier ON UserIdentifier(UserIdentifier) [USING Method]
Method -> {BPLUSTREE | EXTENDIBLEHASH | RTREE | SEQUENTIAL}

==================================================================================

SelectStatement -> SELECT SelectList FROM TableList [WhereStatement] [GroupByStatement] [OrderByStatement] [LimitStatement]

SelectList -> {* | SelectElement[,SelectList]}
SelectElement -> ColumnReference [AS UserIdentifier] | FunctionCall [AS UserIdentifier]
TableList -> {UserIdentifier | (SelectStatement)} [AS UserIdentifier][,TableList]

WhereStatement -> WHERE Condition
Condition -> OrCondition
OrCondition -> AndCondition [OR OrCondition]
AndCondition -> NotCondition [AND AndCondition]
NotCondition -> [NOT] PrimaryCondition
PrimaryCondition -> BoolExp | (Condition)
BoolExp -> SimpleComparison | BetweenComparison | InComparison

SimpleComparison -> ValueExp {== | < | > | <= | >= | !=} ValueExp
BetweenComparison -> ValueExp BETWEEN ValueExp AND ValueExp
InComparison -> ValueExp [NOT] IN (ValueList | SelectStatement)
ValueList -> ValueExp[, ValueList]

ValueExp -> Constant | ColumnReference | FunctionCall
ColumnReference -> [UserIdentifier.]UserIdentifier | (SelectStatement)
FunctionCall -> UserIdentifier(FunctionArgumentList)
FunctionArgumentList -> * | ValueExp [, FunctionArgumentList]

GroupByStatement -> GROUP BY GroupByList
GroupByList -> ColumnReference[,GroupByList]

OrderByStatement -> ORDER BY OrderByList
OrderByList -> OrderByElement [, OrderByList]
OrderByElement -> ColumnReference [ASC | DESC]

LimitStatement -> LIMIT INT_CONSTANT

==================================================================================

DropStatement -> DROP {DropTableStatement | DropIndexStatement}
DropTableStatement -> TABLE UserIdentifier
DropIndexStatement -> INDEX UserIdentifier ON UserIdentifier

==================================================================================

DeleteStatement -> DELETE FROM UserIdentifier WHERE Condition

==================================================================================

If we don't receive a columnlist we assume user is sending all parameters

InsertStatement -> INSERT INTO UserIdentifier[(ColumnList)] VALUES (ValueList)
ColumnList -> UserIdentifier [, ColumnList]
ValueList -> CONSTANT[, ValueList]

==================================================================================

UpdateStatement -> UPDATE UserIdentifier SET UpdateList [WhereStatement]
UpdateList -> SetExp[,UpdateList]
SetExp -> UserIdentifier = ValueExp